import matplotlib.pyplot as plt
import matplotlib as mpl
import scipy.integrate as intgr
import numpy as np

def normalize_psi_PIMC(psi, x):
   int_psi_square = 2*np.pi*25*intgr.simpson(y = x*psi, x = x)
   print(int_psi_square)
   return int_psi_square


plt.style.use('../include/aps.mplstyle')
mpl.rcParams["figure.figsize"] = [3.4039, 2.10373]


f2 = open('../data/pimc/ArR6/radial-N-reduce-8c91642a-74a9-43ea-ba51-09a0aa756691.dat','r')
lines = f2.readlines()
xA61 = np.array([])
yA61 = np.array([])
zA61 = np.array([])
for line in lines[3:]:
    p = line.split()
    xA61 = np.append(xA61,float(p[0]))
    yA61 = np.append(yA61,float(p[1]))
    zA61 = np.append(zA61,float(p[2]))
f2.close()
f2 = open('../data/pimc/ArR6/radial-N-reduce-bef69b2e-0c94-4f54-8901-3cd6f6974ed3.dat','r')
lines = f2.readlines()
xA64 = np.array([])
yA64 = np.array([])
zA64 = np.array([])
for line in lines[3:]:
    p = line.split()
    xA64 = np.append(xA64,float(p[0]))
    yA64 = np.append(yA64,float(p[1]))
    zA64 = np.append(zA64,float(p[2]))
f2.close() 
f2 = open('../data/pimc/ArR6/radial-N-reduce-f91dbe28-280e-4fc8-8333-ba8b13a9521b.dat','r')
lines = f2.readlines()
xA6 = np.array([])
yA6 = np.array([])
zA6 = np.array([])
for line in lines[3:]:
    p = line.split()
    xA6 = np.append(xA6,float(p[0]))
    yA6 = np.append(yA6,float(p[1]))
    zA6 = np.append(zA6,float(p[2]))
f2.close()
f2 = open('../data/pimc/ArR6/radial-N-reduce-06923e57-b262-41e3-9094-0e82f382c23b.dat','r')
lines = f2.readlines()
xA66 = np.array([])
yA66 = np.array([])
zA66 = np.array([])
for line in lines[3:]:
    p = line.split()
    xA66 = np.append(xA66,float(p[0]))
    yA66 = np.append(yA66,float(p[1]))
    zA66 = np.append(zA66,float(p[2]))
f2.close()


norm = normalize_psi_PIMC(yA6,xA6)
norm = normalize_psi_PIMC(yA61,xA61)
norm = normalize_psi_PIMC(yA64,xA64)
norm = normalize_psi_PIMC(yA66,xA66)

f2 = open('../data/pimc/ArR8/radial-N-reduce-4fd8254f-12fa-49c6-b175-625245c7b90f.dat','r')
lines = f2.readlines()
xA81 = np.array([])
yA81 = np.array([])
zA81 = np.array([])
for line in lines[3:]:
    p = line.split()
    xA81 = np.append(xA81,float(p[0]))
    yA81 = np.append(yA81,float(p[1]))
    zA81 = np.append(zA81,float(p[2]))
f2.close()
f2 = open('../data/pimc/ArR8/radial-N-reduce-2b83d13d-2662-4599-8814-8008f0791188.dat','r')
lines = f2.readlines()
xA84 = np.array([])
yA84 = np.array([])
zA84 = np.array([])
for line in lines[3:]:
    p = line.split()
    xA84 = np.append(xA84,float(p[0]))
    yA84 = np.append(yA84,float(p[1]))
    zA84 = np.append(zA84,float(p[2]))
f2.close()
f2 = open('../data/pimc/ArR8/radial-N-reduce-581f432a-5144-4449-99a9-b3ac8f1cf6df.dat','r')
lines = f2.readlines()
xA8 = np.array([])
yA8 = np.array([])
zA8 = np.array([])
for line in lines[3:]:
    p = line.split()
    xA8 = np.append(xA8,float(p[0]))
    yA8 = np.append(yA8,float(p[1]))
    zA8 = np.append(zA8,float(p[2]))
f2.close()
f2 = open('../data/pimc/ArR8/radial-N-reduce-72495c80-c5fc-4cc5-9e5b-477b56f7a098.dat','r')
lines = f2.readlines()
xA86 = np.array([])
yA86 = np.array([])
zA86 = np.array([])
for line in lines[3:]:
    p = line.split()
    xA86 = np.append(xA86,float(p[0]))
    yA86 = np.append(yA86,float(p[1]))
    zA86 = np.append(zA86,float(p[2]))
f2.close()

norm = normalize_psi_PIMC(yA8,xA8)
norm = normalize_psi_PIMC(yA81,xA81)
norm = normalize_psi_PIMC(yA84,xA84)
norm = normalize_psi_PIMC(yA86,xA86)

f2 = open('../data/pimc/CsR6/radial-N-reduce-54c1cbf6-cbfb-4368-ba38-5b70c0e6cf8b.dat','r')
lines = f2.readlines()
xC61 = np.array([])
yC61 = np.array([])
zC61 = np.array([])
for line in lines[3:]:
    p = line.split()
    xC61 = np.append(xC61,float(p[0]))
    yC61 = np.append(yC61,float(p[1]))
    zC61 = np.append(zC61,float(p[2]))
f2.close()
f2 = open('../data/pimc/CsR6/radial-N-reduce-1e851cc1-1e59-4d44-8786-2896477c9f6b.dat','r')
lines = f2.readlines()
xC66 = np.array([])
yC66 = np.array([])
zC66 = np.array([])
for line in lines[3:]:
    p = line.split()
    xC66 = np.append(xC66,float(p[0]))
    yC66 = np.append(yC66,float(p[1]))
    zC66 = np.append(zC66,float(p[2]))
f2.close()
f2 = open('../data/pimc/CsR6/radial-N-reduce-d0a4e45e-9d74-4615-8378-f75907da4b6f.dat','r')
lines = f2.readlines()
xC64 = np.array([])
yC64 = np.array([])
zC64 = np.array([])
for line in lines[3:]:
    p = line.split()
    xC64 = np.append(xC64,float(p[0]))
    yC64 = np.append(yC64,float(p[1]))
    zC64 = np.append(zC64,float(p[2]))
f2.close()
f2 = open('../data/pimc/CsR6/radial-N-reduce-cb54392c-d1c2-4dea-97b8-86f981a9111f.dat','r')
lines = f2.readlines()
xC6 = np.array([])
yC6 = np.array([])
zC6 = np.array([])
for line in lines[3:]:
    p = line.split()
    xC6 = np.append(xC6,float(p[0]))
    yC6 = np.append(yC6,float(p[1]))
    zC6 = np.append(zC6,float(p[2]))
f2.close()


norm = normalize_psi_PIMC(yC6,xC6)
norm = normalize_psi_PIMC(yC61,xC61)
norm = normalize_psi_PIMC(yC64,xC64)
norm = normalize_psi_PIMC(yC66,xC66)

f2 = open('../data/pimc/CsR8/radial-N-reduce-0f3f952d-638d-410c-b99b-bd8c3bdb2934.dat','r')
lines = f2.readlines()
x1 = np.array([])
y1 = np.array([])
z1 = np.array([])
for line in lines[3:]:
    p = line.split()
    x1 = np.append(x1,float(p[0]))
    y1 = np.append(y1,float(p[1]))
    z1 = np.append(z1,float(p[2]))
f2.close()
f2 = open('../data/pimc/CsR8/radial-N-reduce-2148c31c-a07e-4aa2-b530-6de11f7edd86.dat','r')
lines = f2.readlines()
x6 = np.array([])
y6 = np.array([])
z6 = np.array([])
for line in lines[3:]:
    p = line.split()
    x6 = np.append(x6,float(p[0]))
    y6 = np.append(y6,float(p[1]))
    z6 = np.append(z6,float(p[2]))
f2.close()
f2 = open('../data/pimc/CsR8/radial-N-reduce-bae75c59-fb78-4f51-a930-d656e4387976.dat','r')
lines = f2.readlines()
x4 = np.array([])
y4 = np.array([])
z4 = np.array([])
for line in lines[3:]:
    p = line.split()
    x4 = np.append(x4,float(p[0]))
    y4 = np.append(y4,float(p[1]))
    z4 = np.append(z4,float(p[2]))
f2.close()
f2 = open('../data/pimc/CsR8/radial-N-reduce-5c592e8d-7d73-4f61-b25b-e2e1099120ea.dat','r')
lines = f2.readlines()
x = np.array([])
y = np.array([])
z = np.array([])
for line in lines[3:]:
    p = line.split()
    x = np.append(x,float(p[0]))
    y = np.append(y,float(p[1]))
    z = np.append(z,float(p[2]))
f2.close()

norm = normalize_psi_PIMC(y,x)
norm = normalize_psi_PIMC(y1,x1)
norm = normalize_psi_PIMC(y4,x4)
norm = normalize_psi_PIMC(y6,x6)

with plt.style.context('aps'):
   figsize = plt.rcParams['figure.figsize']
   fig,((ax1,ax2),(ax3,ax4)) = plt.subplots(2,2,figsize=(2*figsize[0],2*figsize[1]), constrained_layout=True)

   ax1.errorbar(xC6,yC6,yerr=zC6, linestyle="None",marker = '+', label=r'$\mu = -58.0$ K', color='#5E4FA2', alpha = 0.2)
   ax1.errorbar(xC64,yC64,yerr=zC64, linestyle="None",marker = '+',label=r'$\mu = -40.0$ K', color='#5E4FA2', alpha = 0.4)
   ax1.errorbar(xC66,yC66,yerr=zC66, linestyle="None",marker = '+',label=r'$\mu = -18.0$ K', color='#5E4FA2', alpha = 0.7)
   ax1.errorbar(xC61,yC61,yerr=zC61, linestyle="None",marker = '+', label=r'$\mu = -5.0$ K',  color='#5E4FA2', alpha = 1.0)

   ax1.axhline(0, color='black')
   ax1.axvline(0, color='black')
   ax1.set_ylabel(r'$|\psi(r)|^2$')
   ax1.set_xlim(0,6.2)
   ax1.set_ylim(0,0.04)
   ax1.set_xticks([])
   ax1.tick_params(axis='both', which='major')
   #ax1.sharex(ax3)
   #ax1.set_xlabel('r',fontsize= 10)
   leg = ax1.legend(title = ' (a) R = 6 Å',loc=(0.680,0.475))
   leg._legend_box.align = "left"
   
   ax3.errorbar(xA6,yA6,yerr=zA6, linestyle="None",marker = '+', label=r'$\mu = -58.0$ K', color='#D7414E', alpha = 0.2)
   ax3.errorbar(xA64,yA64,yerr=zA64, linestyle="None",marker = '+',label=r'$\mu = -40.0$ K', color='#D7414E', alpha = 0.4)
   ax3.errorbar(xA66,yA66,yerr=zA66, linestyle="None",marker = '+',label=r'$\mu = -18.0$ K', color='#D7414E', alpha = 0.7)
   ax3.errorbar(xA61,yA61,yerr=zA61, linestyle="None",marker = '+', label=r'$\mu = -5.0$ K',  color='#D7414E', alpha = 1.0)

   ax3.axhline(0, color='black')
   ax3.axvline(0, color='black')
   ax3.set_xlim(0,6.2)
   ax3.set_ylim(0,0.27)
   ax3.set_ylabel(r'$|\psi(r)|^2$')
   ax3.set_xlabel(r'$r$ [Å]')
   ax3.tick_params(axis='both', which='major')
   leg = ax3.legend(title = ' (c) R = 6 Å',loc=(0.680,0.475))
   leg._legend_box.align = "left"

   ax4.errorbar(xA8,yA8,yerr=z, linestyle="None",marker = '+', label=r'$\mu = -58.0$ K', color='#D7414E', alpha = 0.2)
   ax4.errorbar(xA84,yA84,yerr=zA84, linestyle="None",marker = '+',label=r'$\mu = -40.0$ K', color='#D7414E', alpha = 0.4)
   ax4.errorbar(xA86,yA86,yerr=zA86, linestyle="None",marker = '+',label=r'$\mu = -18.0$ K', color='#D7414E', alpha = 0.7)
   ax4.errorbar(xA81,yA81,yerr=zA81, linestyle="None",marker = '+', label=r'$\mu = -5.0$ K',  color='#D7414E', alpha = 1.0)

   ax4.axhline(0, color='black')
   ax4.axvline(0, color='black')
   ax4.set_ylabel(r'$|\psi(r)|^2$')
   ax4.set_xlabel(r'$r$ [Å]')
   ax4.set_xlim(0,8.2)
   ax4.set_ylim(0,0.1)
   ax4.tick_params(axis='both', which='major')
   leg = ax4.legend(title = ' (d) R = 8 Å',loc=(0.680,0.475))
   leg._legend_box.align = "left"
   
   ax2.errorbar(x,y,yerr=z, linestyle="None",marker = '+', label=r'$\mu = -58.0$ K', color='#5E4FA2', alpha = 0.2)
   ax2.errorbar(x4,y4,yerr=z4, linestyle="None",marker = '+',label=r'$\mu = -40.0$ K', color='#5E4FA2', alpha = 0.4)
   ax2.errorbar(x6,y6,yerr=z6, linestyle="None",marker = '+',label=r'$\mu = -18.0$ K', color='#5E4FA2', alpha = 0.7)
   ax2.errorbar(x1,y1,yerr=z1, linestyle="None",marker = '+', label=r'$\mu = -5.0$ K',  color='#5E4FA2', alpha = 1.0)

   ax2.axhline(0, color='black')
   ax2.axvline(0, color='black')
   ax2.set_ylabel(r'$|\psi(r)|^2$')
   ax2.set_ylim(0,0.08)
   ax2.set_xlim(0,8.2)
   ax2.set_xticks([])
   ax2.tick_params(axis='both', which='major')
   #ax2.sharex(ax4)
   #ax2.set_xlabel('r',fontsize= 10)
   leg = ax2.legend(title = '(b) R = 8 Å',loc=(0.680,0.475))
   leg._legend_box.align = "left"
   plt.savefig('Mb-density.pdf')
   #plt.show()


